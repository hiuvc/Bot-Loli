import os
import json
import asyncio
from datetime import datetime
import requests
from colorama import init, Fore
import discord
from discord.ext import commands, tasks
from uptime import save_start_time, get_last_uptime
from keep_alive import keep_alive

# ================= CONFIG =================
init(autoreset=True)
TOKEN = os.getenv("DISCORD_TOKEN")
CHANNEL_ID = int(os.getenv("DISCORD_CHANNEL_ID", "1420764782390149211"))
URL = "https://dashboard.kingdev.sbs/tool_ug.php?status"
MESSAGE_FILE = "stock_message.json"

# Khi bot kh·ªüi ƒë·ªông
last_uptime = get_last_uptime()
if last_uptime:
    hours, remainder = divmod(last_uptime.total_seconds(), 3600)
    minutes, seconds = divmod(remainder, 60)
    print(f"‚ö† Bot l·∫ßn tr∆∞·ªõc ƒë√£ on ƒë∆∞·ª£c {int(hours)}h {int(minutes)}m {int(seconds)}s tr∆∞·ªõc khi b·ªã t·∫Øt.")

save_start_time()

# ================= HELPER =================
def load_message_id():
    if os.path.exists(MESSAGE_FILE):
        try:
            with open(MESSAGE_FILE, "r") as f:
                data = json.load(f)
                return int(data.get("message_id", 0))
        except Exception as e:
            print(Fore.RED + f"‚ö† L·ªói load message_id: {e}")
            return None
    return None

def save_message_id(message_id):
    with open(MESSAGE_FILE, "w") as f:
        json.dump({"message_id": message_id}, f)

def get_stock_embed():
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(URL, headers=headers, timeout=30)
        response.raise_for_status()

        try:
            data = response.json()
        except json.JSONDecodeError:
            return discord.Embed(
                title="üì° UGPHONE STOCK STATUS",
                description=f"‚ùå L·ªói khi parse JSON!\nServer tr·∫£ v·ªÅ:\n```{response.text[:200]}...```",
                color=discord.Color.red()
            )

    except requests.RequestException as e:
        return discord.Embed(
            title="üì° UGPHONE STOCK STATUS",
            description=f"‚ùå L·ªói khi k·∫øt n·ªëi: {e}",
            color=discord.Color.red()
        )

    servers = data.get("servers", {})
    status = data.get("status", "unknown")
    last_updated = data.get("last_updated", "unknown")

    embed = discord.Embed(
        title="üì° UGPHONE STOCK STATUS",
        description=f"**Status:** {status}\n**Message:** Hi·∫øu ƒê·∫πp Zai",
        color=discord.Color.green() if status == "success" else discord.Color.red()
    )

    green = "üü¢"
    red = "üî¥"
    for server, stt in servers.items():
        icon = green if stt != "Out of Stock" else red
        embed.add_field(name=server, value=f"{icon} {stt}", inline=True)

    embed.set_footer(text=f"L·∫ßn c·∫≠p nh·∫≠t cu·ªëi: {last_updated} ‚Ä¢ T·ª± ƒë·ªông l√†m m·ªõi m·ªói 5 ph√∫t")
    return embed

# ================= DISCORD BOT =================
intents = discord.Intents.default()
intents.message_content = True  # c·∫ßn cho l·ªánh /refresh
bot = commands.Bot(command_prefix="!", intents=intents)
stock_message = None

async def init_stock_message():
    global stock_message
    channel = await bot.fetch_channel(CHANNEL_ID)

    message_id = load_message_id()
    if message_id:
        try:
            stock_message = await channel.fetch_message(message_id)
            print(Fore.YELLOW + "‚úî ƒê√£ load message c≈©, s·∫Ω edit ti·∫øp.")
        except:
            stock_message = None
            print(Fore.YELLOW + "‚ö† Kh√¥ng t√¨m th·∫•y message c≈©, s·∫Ω g·ª≠i m·ªõi.")

    if stock_message is None:
        embed = get_stock_embed()
        stock_message = await channel.send(embed=embed)
        save_message_id(stock_message.id)
        print(Fore.GREEN + f"‚úî G·ª≠i message stock m·ªõi: {stock_message.id}")

# ================= TASK LOOP =================
@tasks.loop(minutes=5)
async def update_stock():
    global stock_message
    channel = await bot.fetch_channel(CHANNEL_ID)

    while True:
        try:
            embed = get_stock_embed()

            if stock_message is None:
                stock_message = await channel.send(embed=embed)
                save_message_id(stock_message.id)
                print(Fore.GREEN + f"‚úî G·ª≠i message stock m·ªõi.")
            else:
                await stock_message.edit(embed=embed)
                print(Fore.CYAN + f"‚ôª Updated stock at {datetime.now().strftime('%H:%M:%S')}")
            break  # N·∫øu th√†nh c√¥ng, tho√°t v√≤ng retry

        except Exception as e:
            print(Fore.RED + f"‚ùå L·ªói khi update message: {e}")
            print(Fore.YELLOW + "‚ôª Th·ª≠ l·∫°i sau 5 gi√¢y...")
            await asyncio.sleep(5)  # ƒê·ª£i 5 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i


# ================= COMMAND =================
@bot.command()
async def refresh(ctx):
    """L√†m m·ªõi stock ngay l·∫≠p t·ª©c."""
    global stock_message
    embed = get_stock_embed()
    channel = await bot.fetch_channel(CHANNEL_ID)
    try:
        if stock_message:
            await stock_message.edit(embed=embed)
            await ctx.send("‚ôª Stock ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi!", delete_after=5)
        else:
            stock_message = await channel.send(embed=embed)
            save_message_id(stock_message.id)
            await ctx.send("‚úî ƒê√£ g·ª≠i message stock m·ªõi!", delete_after=5)
    except Exception as e:
        await ctx.send(f"‚ùå L·ªói khi l√†m m·ªõi: {e}", delete_after=10)

# ================= AUTO RECONNECT =================
async def run_bot():
    while True:
        try:
            await bot.start(TOKEN)
        except Exception as e:
            print(Fore.RED + f"L·ªói bot: {e}")
            await asyncio.sleep(5)

# ================= EVENTS =================
@bot.event
async def on_ready():
    print(Fore.GREEN + f"Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    await init_stock_message()
    update_stock.start()

# ================= MAIN =================
if __name__ == "__main__":
    if not TOKEN:
        print(Fore.RED + "‚ùå Vui l√≤ng thi·∫øt l·∫≠p DISCORD_TOKEN trong environment variables!")
        exit(1)

    keep_alive()
    asyncio.run(run_bot())
